head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2014.04.01.09.39.42;	author hotea;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* control animation using two threads
 * one thread handles animation, other thread handles keyboard input
 * cc tbounce.c -lcurses -lpthread -o tbounce
 */

#include <stdio.h>
#include <curses.h>
#include <pthread.h>
#include <stdlib.h>
#include <unistd.h>

/* share variable both threads use. these need a mutex. */

#define MESSAGE " hello "

int row;
int col;
int dir;
int delay;

main()
{
	int ndelay;	/* new delay */
	int c;		/* user input */
	pthread_t msg_thread;	/* a thread */
	void *moving_msg();

	initscr();	/* init curses and tty */
	crmode();
	noecho();
	clear();

	row = 10;	/* start here */
	col = 0;
	dir = 1;
	delay = 200;

	if (pthread_create(&msg_thread, NULL, moving_msg, MESSAGE)) {
		fprintf(stderr, "error creating thread");
		endwin();
		exit(0);
	}

	while (1) {
		ndelay = 0;
		c = getch();
		if (c == 'Q') break;
		if (c == ' ') dir = -dir;
		if (c == 'f' && delay > 2) ndelay = delay/2;
		if (c == 's') ndelay = delay * 2;
		if (ndelay > 0)
			delay = ndelay;
	}
	pthread_cancel(msg_thread);
	endwin();
}

void *moving_msg(char *msg)
{
	while (1) {
		usleep(delay * 1000);
		move(row, col);
		addstr(msg);
		refresh();

		col += dir;
		if (col <= 0 && dir == -1)
			dir = 1;
		else if (col +strlen(msg) >= COLS && dir == 1)
			dir = -1;
	}
}
@
