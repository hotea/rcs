head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2014.03.18.09.40.38;	author hotea;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* a simple logfile server using Unix Domain Datagram Sockets
 * usage: logfiled >> logfilename
 */

#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <time.h>

#define MSGLEN 512
#define oops(m, x) {perror(m); exit(x);}
#define SOCKNAME "/tmp/logfilesock"

int main(int ac, char *av[])
{
	int	sock;
	struct	sockaddr_un addr;
	socklen_t	addrlen;
	char	msg[MSGLEN];
	int	l;
	char	sockname[] = SOCKNAME;
	time_t	now;
	int 	msgnum = 0;
	char	*timestr;

	/* build an address */
	addr.sun_family = AF_UNIX;
	strcpy(addr.sun_path, sockname);	/*filename is address*/
	addrlen = strlen(sockname) + sizeof(addr.sun_family);
	
	sock = socket(PF_UNIX, SOCK_DGRAM, 0);
	if (sock == -1)
		oops("socket",2);

	/*bind the address */
	if (bind(sock, (struct sockaddr *)&addr, addrlen) == -1)
		oops("bind",3);

	/* read and write */
	while (1) {
		l = read(sock, msg, MSGLEN);	/*read works for DGRAM */
		msg[l] = '\0';			/* make it a string */
		time(&now);
		timestr = ctime(&now);
		timestr[strlen(timestr)-1] = '\0';	/* chop newline */

		printf("[%5d] %s %s\n", msgnum++, timestr, msg);
		fflush(stdout);
	}
}
@
