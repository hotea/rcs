head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2014.03.01.02.21.05;	author hotea;	state Exp;
branches;
next	1.2;

1.2
date	2014.02.27.02.09.36;	author hotea;	state Exp;
branches;
next	1.1;

1.1
date	2014.02.26.03.28.38;	author hotea;	state Exp;
branches;
next	;


desc
@first shell
uses fork, exec, wait, and ignores signals
@


1.3
log
@*** empty log message ***
@
text
@/* small shell
 */
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<signal.h>
#include "smsh.h"

#define DFL_PROMPT "> "

int main()
{
  char *cmdline, *prompt, **arglist;
  int result, process(char **);
  void setup();
  
  prompt = DFL_PROMPT;
  setup();

  while ((cmdline = next_cmd(prompt, stdin)) != NULL) {
    if ((arglist = splitline(cmdline)) != NULL) {
      result = process(arglist);
      freelist(arglist);
    }
    free(cmdline);
  }
  return 0;
}

void setup()
/* purpose: initialize shell
 * returns: nothing. calls fatal() if trouble
 */
{
  extern char **environ;

  VLenviron2table(environ);
  signal(SIGINT, SIG_IGN);
  signal(SIGQUIT, SIG_IGN);
}

void fatal(char *s1, char *s2, int n)
{
  fprintf(stderr, "Error: %s, %s\n", s1, s2);
  exit(n);
}
 
@


1.2
log
@if..then..else..fi logic(by calling process())
@
text
@d35 3
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
  int result;
d22 1
a22 1
      result = execute(arglist);
@
